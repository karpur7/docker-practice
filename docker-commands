// install docker
    6  sudo apt-get update
    7  sudo apt install curl
    8  curl -fsSL get.docker.com -o get-docker.sh
    9  sh get-docker.sh

// add user to docker group
   10  sudo usermod -aG docker karpur7
   11  sudo docker version

// install docker-machine
   20  curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine && chmod +x /tmp/docker-machine && sudo cp /tmp/docker-machine /usr/local/bin/docker-machine
   21  docker-machine version

// install docker-compose
sudo -i
    2  curl -L https://github.com/docker/compose/releases/download/1.19.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    3  chmod +x /usr/local/bin/docker-compose
    4  docker-compose version

// clone Bret Fisher git repository
   12  apt install git
   13  cd /home/karpur7/
   16  mkdir code
   17  cd code
   14  cd code/
   15  git clone https://github.com/BretFisher/udemy-docker-mastery.git
   17  cd udemy-docker-mastery/

// update repository
   19  git pull

// check docker version and info
   20  docker version
   21  docker info
   22  docker
   23  ps -ef | grep docker

// running ngnix server in foreground
// --publish : redirects all traffic from port 80 to port 80 on container
docker container run --publish 80:80 ngnix

// running ngnix server in background
// --detach : runs in background
docker container run --publish 80:80 --detach ngnix

// list available/running containers
docker container ls
// list all containers including stopped
docker container ls -a

// stop running container
docker container stop <first four unique digits of container id>

// give a name to ur container
docker container run --publish 80:80 --detach --name webhost ngnix

// see logs generated by ur container
docker container logs <name of the container>

// see processes running on the container
docker container top <name of the container>

// delete stopped container
docker container rm <space separated multiple container ids>

// delete forcefully a running container
docker container rm -f <space separated multiple container ids>


// assignment
  99  docker start elastic_swartz
  100  docker ps
  101  docker container run --name sql --publish 3306:3306 -e MYSQL_RANDOM_ROOT_PASSWORD=yes -d mysql
  102  docker ps
  103  docker container run --name apache --publish 8080:80 -d httpd
  104  docker ps
  105  docker container logs sql
  107  docker container logs apache
  108  docker top apache
  109  docker top sql
  110  docker top nginx
  111  docker ps
  112  docker top elastic_swartz
  113  docker images
  116  docker container stop apache elastic_swartz sql
  117  docker container ls
  118  docker container ls -a
  119  docker image ls
// test nginx and apache works
curl localhost
curl localhost:8080

// more information on the container
  123  docker start elastic_swartz
  124  docker inspect elastic_swartz
  125  docker container start apache sql
  126  docker ps
  127  docker container top apache
  128  docker container inspect apache
  129  docker contianer stats
  130  docker container stats
  131  docker container stats apache
  132  docker container ls
  133  docker contianer top apache
  134  docker container top apache

// start interactive container "-i", "-t" tty session
  138  docker container run --name proxy -it nginx bash
  139  docker ps
  140  docker ps -a
  141  docker ps -a proxy

// attach to existing container(not running)
  142  docker container start -ai proxy
  143  docker image ls

// alpine doesn't contain bash. so use "sh"
  144  docker contianer run -it alpine bash
  145  docker container run -it alpine bash
  146  docker container run -it alpine sh

// start bash or additional commands on existing container interactively
docker container exec -it sql bash

// IP Address used by sql container
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' sql


// Networking
docker network ls
// bridge is the default network driver between host and container
// host directly connects to host network which improves performance
// null doesn't do anything

docker network inspect <network>

docker network create <network>

docker container run --network <network> -d --name new_app <image>

docker container connect <network> <container>
docker container disconnect <network> <container>

// ping is removed from nginx. Use nginx:alpine instead
// Use container name to talk to it instead of statically linked IPs
// talking between containers in same network

docker container run --name alpine_nginx --network my_app_net -d nginx:alpine
docker container run --name alpine_nginx1 --network my_app_net -d nginx:alpine
docker container exec -it alpine_nginx ping alpine_nginx1

// docker link cannot be used for bridge network


// use and throw "--rm". After exiting the bash, containers won't be listed
docker container run --rm -it centos:7 bash
# yum update curl
# curl --version
docker container run --rm -it ubuntu:14.04 bash
# apt-get update && apt-get install -y curl
# curl --version


// DNS look up assignment
// create two containers on the same network with same alias.
// do curl from centos, to see different container is pickedup each time
  204  docker network ls
  208  docker container run --net my_app_net --net-alias search -d elasticsearch:2
  208  docker container run --net my_app_net --net-alias search -d elasticsearch:2
  211  docker container run --rm --net my_app_net alpine nslookup search
  212  docker container run --rm --net my_app_net centos curl -s search:9200
  212  docker container run --rm --net my_app_net centos curl -s search:9200
  212  docker container run --rm --net my_app_net centos curl -s search:9200
  212  docker container run --rm --net my_app_net centos curl -s search:9200

// operations on images
  218  docker images
  219  docker image ls
  220  docker pull nginx
  221  docker pull nginx:latest
  222  docker image ls

// check history of image
  223  docker history nginx:latest
  224  docker history 5936d78e60bb

// check image detail in depth
  225  docker image inspect nginx

// create image tag
  226  docker image tag nginx karpur7/nginx:test
  227  docker image ls

// push the tag
  228  docker image push karpur7/nginx:test
  229  cat .docker/config.json

// Docker file basics
* FROM --> namespace/resource/tag
* RUN  --> Execute a command
* COPY --> Copy from host to container
* WORKDIR --> change directory
* CMD  --> final command to be executed as container
* ENV  --> ENVIRONMENT variable key-value pair
* EXPOSE --> publish port
* VOLUME --> volume to be created
  249  vim ./dockerfile-sample-1/Dockerfile
  251  cd dockerfile-sample-1/
  252  docker image build -t custom_nginx .
  253  docker login
  256  cd ../dockerfile-sample-1/
  258  docker image build -t custom_nginx .
  259  docker image ls
  260  docker image ls | grep custom
  263  docker container run -p 80:80 --rm nginx
  264  docker image build -t nginx-with-html .
  261  cd ../dockerfile-sample-2/
  267  docker container run -p 80:80 --rm nginx-with-html
  286  docker image create -t sample-node-js-app .
  287  docker image build -t sample-node-js-app .
  289  docker image build -t sample-node-js-app .
  290  docker image ls
  294  docker container run --rm -p 80:3000 sample-node-js-app
  295  docker images
  303  docker tag sample-node-js-app karpur7/sample-node-js.app
  304  docker push karpur7/sample-node-js.app
  305  docker image ls
  306  docker image rm karpur7/sample-node-js.app
  307  docker images
  308  docker container run --rm -p 80:3000 karpur7/sample-node-js.app:latest


// VOLUMES : use inspect and see under mounts section
  309  docker images
  310  docker container ls -a
  311  docker container start 359de9ced4ed
  312  docker container ls
  313  docker container inspect 359de9ced4ed
  314  ls -l /var/lib/docker/volumes/5b4e98290b9eff8e408c68e2ca1e80d70d89c84a38f2ed45525d8e564d667d1d/_data
  315  sudo ls -l /var/lib/docker/volumes/5b4e98290b9eff8e408c68e2ca1e80d70d89c84a38f2ed45525d8e564d667d1d/_data
  316  docker volume ls
  317  docker container stop sql
  318  docker container inspect 359de9ced4ed
  319  docker volume ls
  320  docker container ls
  321  docker container run --name sql1 -d -v mysql-db:/var/lib/mysql -e MYSQL_RANDOM_PASSWORD=TRUE mysql
  322  docker contianer ls
  323  docker container ls
  325  docker container run --name sql1 -d -v mysql-db:/var/lib/mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes=yes mysql
  326  docker container run --name sql2 -d -v mysql-db:/var/lib/mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes=yes mysql
  327  docker container ls
  328  docker container ls
  329  docker container ls -a
  330  docker volume ls

  347  docker container run -d --name psql -v psql:/var/lib/postgresql/data postgresql:9.6.1
  348  docker login
  349  docker container run -d --name psql -v psql:/var/lib/postgresql/data postgresql:9.6.1
  350  docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1
  351  docker container logs -f psql
  352  docker container stop psql
  353  docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2
  354  docker container ls
  355  docker ps
  356  docker ps -a
  357  docker volume ls
  358  docker container logs -f psql
  359  docker container logs -f psql2


// Bind mounts
  413  cd code/udemy-docker-mastery/bindmount-sample-1/
  415  docker run -p 80:4000 -v $(pwd):/site/bretfisher/hekyll-serve
  416  docker container run -p 80:4000 -v $(pwd):/site/bretfisher/hekyll-serve
  418  docker pull
  419  docker run -p 80:4000 -v $(pwd):/site bretfisher/hekyll-serve
  420  docker login
  421  docker run -p 80:4000 -v $(pwd):/site bretfisher/hekyll-serve
  422  docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve
  423  cd code/udemy-docker-mastery/dockerfile-2
  424  cd code/udemy-docker-mastery/dockerfile-sample-2/
  427  docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx
  428  docker container run -d --name nginx2 -p 8080:80 nginx
  429  docker container exec -it nginx bash


// docker-compose
  444  cat docker-compose.yml
* version: '2'
* services:
*    nginx:
*        build: .
*         image: image-name
*         ports:
*         - "in:out"
*         volumes:
*         - vol:mount-point
*         environment:
*         - key=value
*  volumes:
*      vol1:
*      vol2:
*
  445  docker-compose up
  446  docker-compose up -d
  447  docker-compose logs
  448  docker-compose ps
  449  docker-compose top
  450  docker-compose down
  462  vim docker-compose.yml
  463  docker-compose up

// DOCKER SWARM
* disabled by default
* check docker info

  524  docker info

* enable using init
  525  docker swarm init

* After enabling, one node is created
  526  docker node ls
  527  docker node help
  528  docker swarm --help
  529  docker service --help

* create ping service
  535  docker service create alpine ping 8.8.8.8
  536  docker service ls
  538  docker service ps admiring_wescoff
  539  docker container ls
  540  docker service ls

* Update to create 3 replicas
  541  docker service update fb4pb6ekqj4z --replicas 3
  542  docker service ls
  543  docker service ps fb4pb6ekqj4z
  544  docker container ls

* remove one replica, swarm will attempt to start one
  546  docker container rm -f 48b55123f53f
  547  docker service ls
  548  docker service ps fb4pb6ekqj4z

* delete the service
  549  docker service rm admiring_wescoff
  550  docker service ps fb4pb6ekqj4z
  551  docker service ls
